environments = {
  "sandbox" = {
    database_role_assignment = {
      readonly = []
      readwrite = ["eve.deng@gov.bc.ca"]
      admin = []
    }
    environment_custom_roles = {
      roledeveloper = {
        title = "Role Developer"
        description = "Role for Developer."
        permissions = [
          "resourcemanager.projects.get",
          "serviceusage.services.get",
          "serviceusage.services.list",
          "storage.managedFolders.get",
          "storage.objects.get",
          "storage.objects.list",
          "storage.buckets.get",
          "storage.buckets.list",
          "artifactregistry.repositories.get",
          "artifactregistry.tags.get",
          "run.locations.list",
          "run.operations.get",
          "run.operations.list",
          "run.revisions.get",
          "run.revisions.list",
          "run.executions.get",
          "run.executions.list",
          "run.services.get",
          "run.services.list",
          "run.routes.get",
          "run.routes.list",
          "run.jobs.get",
          "run.jobs.list",
          "run.jobs.run",
          "appengine.applications.get",
          "cloudscheduler.jobs.enable",
          "cloudscheduler.jobs.fullView",
          "cloudscheduler.jobs.get",
          "cloudscheduler.jobs.list",
          "cloudscheduler.jobs.pause",
          "cloudscheduler.jobs.run",
          "cloudscheduler.locations.get",
          "cloudscheduler.locations.list",
          "cloudsql.instances.login",
          "pubsub.topics.get",
          "pubsub.topics.list",
          "pubsub.topics.publish",
          "pubsub.subscriptions.list",
          "pubsub.snapshots.list",
          "monitoring.dashboards.get",
          "monitoring.timeSeries.list",
          "logging.exclusions.get",
          "logging.exclusions.list",
          "logging.links.get",
          "logging.links.list",
          "logging.logEntries.list",
          "logging.logMetrics.get",
          "logging.logMetrics.list",
          "logging.logs.list",
          "logging.operations.get",
          "logging.operations.list",
          "logging.queries.create",
          "logging.queries.delete",
          "logging.queries.get",
          "logging.queries.list",
          "logging.queries.listShared",
          "logging.queries.update",
          "logging.views.get",
          "logging.views.list",
          "cloudsql.databases.get",
          "cloudsql.databases.list",
          "cloudsql.instances.get",
          "cloudsql.instances.list",
          "cloudsql.instances.connect",
          "cloudsql.instances.executeSql",
          "cloudsql.users.get",
          "cloudsql.users.list",
          "cloudbuild.builds.get",
          "cloudbuild.builds.list",
          "cloudbuild.connections.list",
          "cloudbuild.repositories.list",
          "clouddeploy.config.get",
          "clouddeploy.deliveryPipelines.get",
          "clouddeploy.deliveryPipelines.list",
          "clouddeploy.jobRuns.get",
          "clouddeploy.jobRuns.list",
          "clouddeploy.locations.get",
          "clouddeploy.locations.list",
          "clouddeploy.operations.get",
          "clouddeploy.operations.list",
          "clouddeploy.releases.get",
          "clouddeploy.releases.list",
          "clouddeploy.rollouts.get",
          "clouddeploy.rollouts.list",
          "clouddeploy.targets.get",
          "clouddeploy.targets.list",
          "firebase.clients.get",
          "firebase.clients.list",
          "firebase.projects.get",
          "firebasehosting.sites.get",
          "firebasehosting.sites.list",
          "cloudconfig.configs.get",
          "cloudconfig.configs.update"
        ]
      }
    }
  }
  "dev" = {
    database_role_assignment = {
      readonly = []
      readwrite = ["eve.deng@gov.bc.ca"]
      admin = []
    }
    environment_custom_roles = {
      roledeveloper = {
        title = "Role Developer"
        description = "Role for Developer."
        permissions = [
          "resourcemanager.projects.get",
          "serviceusage.services.get",
          "serviceusage.services.list",
          "artifactregistry.repositories.get",
          "artifactregistry.tags.get",
          "cloudbuild.builds.create",
          "cloudbuild.builds.get",
          "cloudbuild.builds.list",
          "cloudbuild.builds.update",
          "cloudbuild.connections.list",
          "cloudbuild.repositories.list",
          "cloudconfig.configs.get",
          "cloudconfig.configs.update",
          "clouddeploy.config.get",
          "clouddeploy.deliveryPipelines.get",
          "clouddeploy.deliveryPipelines.list",
          "clouddeploy.jobRuns.get",
          "clouddeploy.jobRuns.list",
          "clouddeploy.locations.get",
          "clouddeploy.locations.list",
          "clouddeploy.operations.get",
          "clouddeploy.operations.list",
          "clouddeploy.releases.get",
          "clouddeploy.releases.list",
          "clouddeploy.rollouts.get",
          "clouddeploy.rollouts.list",
          "clouddeploy.targets.get",
          "clouddeploy.targets.list",
          "appengine.applications.get",
          "cloudscheduler.jobs.create",
          "cloudscheduler.jobs.delete",
          "cloudscheduler.jobs.enable",
          "cloudscheduler.jobs.fullView",
          "cloudscheduler.jobs.get",
          "cloudscheduler.jobs.list",
          "cloudscheduler.jobs.pause",
          "cloudscheduler.jobs.run",
          "cloudscheduler.jobs.update",
          "cloudscheduler.locations.get",
          "cloudscheduler.locations.list",
          "cloudsql.databases.get",
          "cloudsql.databases.list",
          "cloudsql.instances.get",
          "cloudsql.instances.login",
          "cloudsql.instances.list",
          "cloudsql.instances.connect",
          "cloudsql.instances.executeSql",
          "cloudsql.users.get",
          "cloudsql.users.list",
          "cloudtrace.traces.get",
          "firebase.clients.get",
          "firebase.clients.list",
          "firebase.projects.get",
          "firebasehosting.sites.get",
          "firebasehosting.sites.list",
          "logging.exclusions.get",
          "logging.exclusions.list",
          "logging.links.get",
          "logging.links.list",
          "logging.logEntries.list",
          "logging.logMetrics.get",
          "logging.logMetrics.list",
          "logging.logs.list",
          "logging.operations.get",
          "logging.operations.list",
          "logging.queries.create",
          "logging.queries.delete",
          "logging.queries.get",
          "logging.queries.list",
          "logging.queries.listShared",
          "logging.queries.update",
          "logging.views.get",
          "logging.views.list",
          "monitoring.dashboards.get",
          "monitoring.timeSeries.list",
          "pubsub.snapshots.list",
          "pubsub.subscriptions.consume",
          "pubsub.subscriptions.create",
          "pubsub.subscriptions.delete",
          "pubsub.subscriptions.get",
          "pubsub.subscriptions.list",
          "pubsub.subscriptions.update",
          "pubsub.topics.attachSubscription",
          "pubsub.topics.create",
          "pubsub.topics.delete",
          "pubsub.topics.detachSubscription",
          "pubsub.topics.get",
          "pubsub.topics.list",
          "pubsub.topics.publish",
          "pubsub.topics.update",
          "pubsub.topics.updateTag",
          "run.configurations.get",
          "run.configurations.list",
          "run.executions.get",
          "run.executions.list",
          "run.jobs.get",
          "run.jobs.list",
          "run.jobs.run",
          "run.locations.list",
          "run.operations.get",
          "run.operations.list",
          "run.revisions.get",
          "run.revisions.list",
          "run.routes.get",
          "run.routes.invoke",
          "run.routes.list",
          "run.services.get",
          "run.services.list",
          "run.services.update",
          "run.tasks.get",
          "run.tasks.list",
          "serviceusage.services.use",
          "serviceusage.services.list",
          "storage.managedFolders.get",
          "storage.objects.get",
          "storage.objects.list",
          "storage.buckets.get",
          "storage.buckets.list"
        ]
      }
    }
   #  pam_bindings = [
   #   {
   #     role       = "roleitops"
   #     principals = ["user:andriy.bolyachevets@gov.bc.ca"]
   #     role_type  = "custom"
   #   }
   # ]
  }
  "test" = {
    database_role_assignment = {
      readonly = []
      readwrite = ["eve.deng@gov.bc.ca"]
      admin = []
    }
    environment_custom_roles = {
      roledeveloper = {
        title = "Role Developer"
        description = "Role for Developer."
        permissions = [
          "resourcemanager.projects.get",
          "serviceusage.services.get",
          "serviceusage.services.list",
          "storage.managedFolders.get",
          "storage.objects.get",
          "storage.objects.list",
          "storage.buckets.get",
          "storage.buckets.list",
          "artifactregistry.repositories.get",
          "artifactregistry.tags.get",
          "run.locations.list",
          "run.operations.get",
          "run.operations.list",
          "run.revisions.get",
          "run.revisions.list",
          "run.executions.get",
          "run.executions.list",
          "run.services.get",
          "run.services.list",
          "run.routes.get",
          "run.routes.list",
          "run.jobs.get",
          "run.jobs.list",
          "run.jobs.run",
          "appengine.applications.get",
          "cloudscheduler.jobs.enable",
          "cloudscheduler.jobs.fullView",
          "cloudscheduler.jobs.get",
          "cloudscheduler.jobs.list",
          "cloudscheduler.jobs.pause",
          "cloudscheduler.jobs.run",
          "cloudscheduler.locations.get",
          "cloudscheduler.locations.list",
          "pubsub.topics.get",
          "pubsub.topics.list",
          "pubsub.topics.publish",
          "pubsub.subscriptions.list",
          "pubsub.snapshots.list",
          "monitoring.dashboards.get",
          "monitoring.timeSeries.list",
          "logging.exclusions.get",
          "logging.exclusions.list",
          "logging.links.get",
          "logging.links.list",
          "logging.logEntries.list",
          "logging.logMetrics.get",
          "logging.logMetrics.list",
          "logging.logs.list",
          "logging.operations.get",
          "logging.operations.list",
          "logging.queries.create",
          "logging.queries.delete",
          "logging.queries.get",
          "logging.queries.list",
          "logging.queries.listShared",
          "logging.queries.update",
          "logging.views.get",
          "logging.views.list",
          "cloudsql.databases.get",
          "cloudsql.databases.list",
          "cloudsql.instances.get",
          "cloudsql.instances.login",
          "cloudsql.instances.list",
          "cloudsql.instances.connect",
          "cloudsql.instances.executeSql",
          "cloudsql.users.get",
          "cloudsql.users.list",
          "cloudbuild.builds.get",
          "cloudbuild.builds.list",
          "cloudbuild.connections.list",
          "cloudbuild.repositories.list",
          "clouddeploy.config.get",
          "clouddeploy.deliveryPipelines.get",
          "clouddeploy.deliveryPipelines.list",
          "clouddeploy.jobRuns.get",
          "clouddeploy.jobRuns.list",
          "clouddeploy.locations.get",
          "clouddeploy.locations.list",
          "clouddeploy.operations.get",
          "clouddeploy.operations.list",
          "clouddeploy.releases.get",
          "clouddeploy.releases.list",
          "clouddeploy.rollouts.get",
          "clouddeploy.rollouts.list",
          "clouddeploy.targets.get",
          "clouddeploy.targets.list",
          "firebase.clients.get",
          "firebase.clients.list",
          "firebase.projects.get",
          "firebasehosting.sites.get",
          "firebasehosting.sites.list",
          "cloudconfig.configs.get",
          "cloudconfig.configs.update"
        ]
      }
    }
  }
  "prod" = {
    environment_custom_roles = {
      roleba = {
        title = "Role BA"
        description = "Role for Business Analyst."
        permissions = [
          "resourcemanager.projects.get",
          "serviceusage.services.list",
          "cloudsql.databases.get",
          "cloudsql.databases.list",
          "cloudsql.instances.get",
          "cloudsql.instances.login",
          "cloudsql.instances.list",
          "cloudsql.instances.connect",
          "cloudsql.instances.executeSql",
          "cloudsql.users.get",
          "cloudsql.users.list",
          "cloudsql.backupRuns.get",
          "cloudsql.backupRuns.list"
        ]
      },
      rolepam = {
        title = "Role PAM"
        description = "Role for PAM entitlement grants and revocations."
        permissions = [
            "resourcemanager.projects.getIamPolicy",
            "resourcemanager.projects.setIamPolicy",
            "cloudscheduler.jobs.create",
            "cloudscheduler.jobs.get",
            "cloudscheduler.jobs.delete",
            "cloudscheduler.locations.list",
            "cloudscheduler.locations.get",
            "cloudsql.instances.get",
            "cloudsql.users.create",
            "cloudsql.users.delete",
            "cloudsql.instances.connect",
            "privilegedaccessmanager.entitlements.list",
            "iam.roles.get",
            "iam.serviceAccounts.actAs",
            "serviceusage.services.get",
            "serviceusage.services.list",
            "pubsub.subscriptions.consume"
        ]
      },
      roleitops = {
        title = "Role IT Ops"
        description = "Role for IT Ops."
        permissions = [
          "resourcemanager.projects.get",
          "serviceusage.services.list",
          "monitoring.dashboards.get",
          "monitoring.timeSeries.list",
          "logging.exclusions.get",
          "logging.exclusions.list",
          "logging.links.get",
          "logging.links.list",
          "logging.logEntries.list",
          "logging.logMetrics.get",
          "logging.logMetrics.list",
          "logging.logs.list",
          "logging.operations.get",
          "logging.operations.list",
          "logging.queries.create",
          "logging.queries.delete",
          "logging.queries.get",
          "logging.queries.list",
          "logging.queries.listShared",
          "logging.queries.update",
          "logging.views.get",
          "logging.views.list",
          "cloudsql.databases.get",
          "cloudsql.databases.list",
          "cloudsql.instances.get",
          "cloudsql.instances.login",
          "cloudsql.instances.list",
          "cloudsql.instances.connect",
          "cloudsql.instances.executeSql",
          "cloudsql.users.get",
          "cloudsql.users.list",
          "cloudsql.backupRuns.get",
          "cloudsql.backupRuns.list"
        ]
      },
      roledeveloper = {
        title = "Role Developer"
        description = "Role for Developer."
        permissions = [
          "resourcemanager.projects.get",
          "serviceusage.services.get",
          "serviceusage.services.list",
          "storage.managedFolders.get",
          "storage.objects.get",
          "storage.objects.list",
          "storage.buckets.get",
          "storage.buckets.list",
          "artifactregistry.repositories.get",
          "artifactregistry.tags.get",
          "run.locations.list",
          "run.operations.get",
          "run.operations.list",
          "run.revisions.get",
          "run.revisions.list",
          "run.executions.get",
          "run.executions.list",
          "run.services.get",
          "run.services.list",
          "run.routes.get",
          "run.routes.list",
          "run.jobs.get",
          "run.jobs.list",
          "run.jobs.run",
          "appengine.applications.get",
          "cloudscheduler.jobs.enable",
          "cloudscheduler.jobs.fullView",
          "cloudscheduler.jobs.get",
          "cloudscheduler.jobs.list",
          "cloudscheduler.jobs.pause",
          "cloudscheduler.jobs.run",
          "cloudscheduler.locations.get",
          "cloudscheduler.locations.list",
          "pubsub.topics.get",
          "pubsub.topics.list",
          "pubsub.topics.publish",
          "pubsub.subscriptions.list",
          "pubsub.snapshots.list",
          "monitoring.dashboards.get",
          "monitoring.timeSeries.list",
          "logging.exclusions.get",
          "logging.exclusions.list",
          "logging.links.get",
          "logging.links.list",
          "logging.logEntries.list",
          "logging.logMetrics.get",
          "logging.logMetrics.list",
          "logging.logs.list",
          "logging.operations.get",
          "logging.operations.list",
          "logging.queries.create",
          "logging.queries.delete",
          "logging.queries.get",
          "logging.queries.list",
          "logging.queries.listShared",
          "logging.queries.update",
          "logging.views.get",
          "logging.views.list",
          "cloudsql.databases.get",
          "cloudsql.databases.list",
          "cloudsql.instances.get",
          "cloudsql.instances.login",
          "cloudsql.instances.list",
          "cloudsql.instances.connect",
          "cloudsql.instances.executeSql",
          "cloudsql.users.get",
          "cloudsql.users.list",
          "cloudbuild.builds.get",
          "cloudbuild.builds.list",
          "cloudbuild.connections.list",
          "cloudbuild.repositories.list",
          "clouddeploy.config.get",
          "clouddeploy.deliveryPipelines.get",
          "clouddeploy.deliveryPipelines.list",
          "clouddeploy.jobRuns.get",
          "clouddeploy.jobRuns.list",
          "clouddeploy.locations.get",
          "clouddeploy.locations.list",
          "clouddeploy.operations.get",
          "clouddeploy.operations.list",
          "clouddeploy.releases.get",
          "clouddeploy.releases.list",
          "clouddeploy.rollouts.get",
          "clouddeploy.rollouts.list",
          "clouddeploy.targets.get",
          "clouddeploy.targets.list",
          "firebase.clients.get",
          "firebase.clients.list",
          "firebase.projects.get",
          "firebasehosting.sites.get",
          "firebasehosting.sites.list",
          "cloudconfig.configs.get",
          "cloudconfig.configs.update"
        ]
      }
    }
  }
  "tools" = {
    environment_custom_roles = {
      roledeveloper = {
          title = "Role Developer"
          description = "Role for Developer."
          permissions = [
            "resourcemanager.projects.get",
            "serviceusage.services.get",
            "serviceusage.services.list",
            "storage.managedFolders.get",
            "storage.objects.get",
            "storage.objects.list",
            "storage.buckets.get",
            "storage.buckets.list",
            "artifactregistry.repositories.get",
            "artifactregistry.tags.get",
            "run.locations.list",
            "run.operations.get",
            "run.operations.list",
            "run.revisions.get",
            "run.revisions.list",
            "run.executions.get",
            "run.executions.list",
            "run.services.get",
            "run.services.list",
            "run.routes.get",
            "run.routes.list",
            "run.jobs.get",
            "run.jobs.list",
            "run.jobs.run",
            "appengine.applications.get",
            "cloudscheduler.jobs.enable",
            "cloudscheduler.jobs.fullView",
            "cloudscheduler.jobs.get",
            "cloudscheduler.jobs.list",
            "cloudscheduler.jobs.pause",
            "cloudscheduler.jobs.run",
            "cloudscheduler.locations.get",
            "cloudscheduler.locations.list",
            "pubsub.topics.get",
            "pubsub.topics.list",
            "pubsub.topics.publish",
            "pubsub.subscriptions.list",
            "pubsub.snapshots.list",
            "monitoring.dashboards.get",
            "monitoring.timeSeries.list",
            "logging.exclusions.get",
            "logging.exclusions.list",
            "logging.links.get",
            "logging.links.list",
            "logging.logEntries.list",
            "logging.logMetrics.get",
            "logging.logMetrics.list",
            "logging.logs.list",
            "logging.operations.get",
            "logging.operations.list",
            "logging.queries.create",
            "logging.queries.delete",
            "logging.queries.get",
            "logging.queries.list",
            "logging.queries.listShared",
            "logging.queries.update",
            "logging.views.get",
            "logging.views.list",
            "cloudsql.databases.get",
            "cloudsql.databases.list",
            "cloudsql.instances.get",
            "cloudsql.instances.login",
            "cloudsql.instances.list",
            "cloudsql.instances.connect",
            "cloudsql.instances.executeSql",
            "cloudsql.users.get",
            "cloudsql.users.list",
            "cloudbuild.builds.get",
            "cloudbuild.builds.list",
            "cloudbuild.connections.list",
            "cloudbuild.repositories.list",
            "clouddeploy.config.get",
            "clouddeploy.deliveryPipelines.get",
            "clouddeploy.deliveryPipelines.list",
            "clouddeploy.jobRuns.get",
            "clouddeploy.jobRuns.list",
            "clouddeploy.locations.get",
            "clouddeploy.locations.list",
            "clouddeploy.operations.get",
            "clouddeploy.operations.list",
            "clouddeploy.releases.get",
            "clouddeploy.releases.list",
            "clouddeploy.rollouts.get",
            "clouddeploy.rollouts.list",
            "clouddeploy.targets.get",
            "clouddeploy.targets.list",
            "firebase.clients.get",
            "firebase.clients.list",
            "firebase.projects.get",
            "firebasehosting.sites.get",
            "firebasehosting.sites.list",
            "cloudconfig.configs.get",
            "cloudconfig.configs.update"
          ]
      }
    }
  }
}
