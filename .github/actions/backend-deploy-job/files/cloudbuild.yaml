steps:
# build image if not exists in artifact registry
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  script: |
    #!/usr/bin/env bash
    if [[ -z `gcloud artifacts docker images describe ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:$_SHORT_SHA --verbosity=none` ]]
    then
      docker build \
        -t ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:$_SHORT_SHA \
        --cache-from ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:latest\
        .

      docker push ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:$_SHORT_SHA

      gcloud artifacts docker tags add \
          ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:$_SHORT_SHA \
          ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:latest
    else
      echo 'image tag exists'
    fi

# prepare/setup service and cloud deploy manifest files
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash

    PROJECT_ID=$(op read -n op://CD/${_DEPLOY_TARGET}/${_APP_NAME}/DEPLOY_PROJECT_ID)
    echo $PROJECT_ID > /workspace/project_id.txt
    PROJECT_NAME=$(echo $PROJECT_ID | cut -d'-' -f 1)

    targets=(${_DEPLOY_TARGETS})
    if [ -z ${_DEPLOY_TARGET_FROM} ] || [ ${_DEPLOY_TARGET_FROM} = ${targets[0]} ]; then
      # update the pipeline name
      export PIPELINE_NAME=${_DEPLOY_PIPELINE}
      yq e -i '.metadata.name = env(PIPELINE_NAME)' ./devops/gcp/clouddeploy.yaml

      for env_name in "${targets[@]}"; do
        export APP_ENV=${env_name}

        if [[ -z "$(op inject -f -i ./devops/vaults.gcp.env -o ./devops/vaults.${env_name})" ]]; then
           echo "Error: failed to generate secrets via 1password vault." >&2
           exit 1
        fi

        export VPC_CONNECTOR=$(awk -F '=' '/^VPC_CONNECTOR/ {print $2}' ./devops/vaults.${env_name})
        export VAL=$(awk '{f1=f2=$0; sub(/=.*/,"",f1); sub(/[^=]+=/,"",f2); printf "- name: %s\n  value: %s\n",f1,f2}' ./devops/vaults.${env_name} | sed 's/\"/\"/g')

        if [ "$VPC_CONNECTOR" ]; then
          yq e '.spec.template.metadata.annotations["run.googleapis.com/vpc-access-egress"] = "private-ranges-only" |
                .spec.template.metadata.annotations["run.googleapis.com/vpc-access-connector"] = env(VPC_CONNECTOR)' \
                ./devops/gcp/k8s/service.template.yaml > ./devops/gcp/k8s/temp-service.${env_name}.yaml
          # generate manifest for each environment
          yq e '.spec.template.spec.containers[0].env += env(VAL)' ./devops/gcp/k8s/temp-service.${env_name}.yaml > ./devops/gcp/k8s/service.${env_name}.yaml
        else
          # generate manifest for each environment
          yq e '.spec.template.spec.template.spec.containers[0].env += env(VAL)' ./devops/gcp/k8s/job.template.yaml > ./devops/gcp/k8s/job.${env_name}.yaml
        fi
      done

      targets_full=(${_DEPLOY_FULL_TARGETS})

      # find difference of targets compare with full targets
      envs_diff=($(echo ${targets_full[@]} ${targets[@]} | tr ' ' '\n' | sort | uniq -u))
      for env_name in "${envs_diff[@]}"; do
        # remove the target from cloud deploy manifest
        export TARGET_ENV=${PROJECT_NAME}-${env_name}
        yq -i 'del(.serialPipeline.stages[] | select(.targetId == env(TARGET_ENV)))' ./devops/gcp/clouddeploy.yaml
      done
    fi

    # Apply Cloud Deploy deployment
    gcloud deploy apply --file=./devops/gcp/clouddeploy.yaml  \
      --region=${_REGION} \
      --project=${_DEPLOY_RUNNING_PROJECT_ID}

# deploy
- name: 'gcr.io/cloud-builders/gcloud'
  script: |
    #!/usr/bin/env bash

    PROJECT_ID=$(cat /workspace/project_id.txt)
    PROJECT_NAME=$(echo $PROJECT_ID | cut -d'-' -f 1)
    TARGE_ENV=${PROJECT_NAME}-${_DEPLOY_TARGET}

    # tag image
    gcloud artifacts docker tags add \
          ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:$_SHORT_SHA \
          ${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:${_DEPLOY_TARGET}

    cd ./devops/gcp/

    if [ -z ${_DEPLOY_TARGET_FROM} ] || [ ${_DEPLOY_TARGET_FROM} = ${_DEPLOY_TARGET} ]; then
      RELEASE_TIMESTAMP=$(date '+%Y%m%d%H%M')

      gcloud deploy releases create v-$_SHORT_SHA-${RELEASE_TIMESTAMP} \
        --delivery-pipeline=${_DEPLOY_PIPELINE} \
        --region=${_REGION} \
        --to-target=${TARGE_ENV} \
        --images=image-placeholder=${_REGION}-docker.pkg.dev/${_DEPLOY_RUNNING_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:$_SHORT_SHA
    else
      # prompt the existing release
      gcloud artifacts docker tags add \
        ${_REGION}-docker.pkg.dev/${_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:${_DEPLOY_TARGET_FROM} \
        ${_REGION}-docker.pkg.dev/${_PROJECT_ID}/cloud-run-repo/${_APP_NAME}:${_DEPLOY_TARGET}

      LATEST_RELEASE_NAME=$(gcloud deploy targets describe ${_DEPLOY_TARGET_FROM} \
            --delivery-pipeline=${_DEPLOY_PIPELINE} \
            --region=${_REGION} \
            --format="value('Latest release')")

      gcloud deploy releases promote --release=${LATEST_RELEASE_NAME} \
        --delivery-pipeline=${_DEPLOY_PIPELINE}\
        --region=${_REGION} \
        --to-target=${TARGE_ENV}
    fi

# handle multiple jobs
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  script: |
    #!/usr/bin/env bash

    res=$((ls run_*.sh  >> /dev/null 2>&1 && echo "EXIST") || echo "NOT_EXIST")

    if [ "$res" = "EXIST" ]; then

      JOB_NAMESPACE=$(cat /workspace/project_id.txt)

      # fetch the mother job's yaml
      gcloud run jobs describe ${_APP_NAME}-${_DEPLOY_TARGET} --format=yaml --project=${JOB_NAMESPACE} --region=${_REGION} > ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml

      # remove unique metadata
      yq -i 'del(.status)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml
      yq -i 'del(.metadata.generation)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml
      yq -i 'del(.metadata.creationTimestamp)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml
      yq -i 'del(.metadata.namespace)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml
      yq -i 'del(.metadata.resourceVersion)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml
      yq -i 'del(.metadata.selfLink)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml
      yq -i 'del(.metadata.uid)' ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml

      for file in run_*sh;
      do
          JOB_SCRIPT_NAME=$(echo "${file##*/}")
          export JOB_NAME=$(echo ${_APP_NAME}-${_DEPLOY_TARGET}-${JOB_SCRIPT_NAME} | cut  -d'.' -f 1 | tr "_" "-")
          export COMMAND="./${JOB_SCRIPT_NAME}"

          # replace job and
          yq e '.metadata.name = env(JOB_NAME) | .spec.template.spec.template.spec.containers[0].command = env(COMMAND)' \
            ./devops/gcp/k8s/job.${_DEPLOY_TARGET}.yaml > ./devops/gcp/k8s/${JOB_NAME}.yaml

          # create job if not exist
          res=$(gcloud run jobs describe $JOB_NAME --project=${JOB_NAMESPACE} --region=${_REGION} || echo "NOT_EXIST")

          if [ "$res" = "NOT_EXIST" ]; then
            echo "Creating your job..."
            gcloud run jobs create $JOB_NAME --project=${JOB_NAMESPACE} --region=${_REGION}
          fi

          # replace the yaml
          gcloud run jobs replace ./devops/gcp/k8s/${JOB_NAME}.yaml --project=${JOB_NAMESPACE} --region=${_REGION}

      done
    fi

availableSecrets:
  secretManager:
  - versionName: projects/331250273634/secrets/OP_CONNECT_HOST/versions/latest
    env: 'OP_CONNECT_HOST'
  - versionName: projects/331250273634/secrets/OP_CONNECT_TOKEN/versions/latest
    env: 'OP_CONNECT_TOKEN'

options:
  automapSubstitutions: true
  substitutionOption: 'ALLOW_LOOSE'
substitutions:
  _APP_NAME:
  _SHORT_SHA:
  _DB_UPGRADE: 'no'
  _DEPLOY_FULL_TARGETS: dev test sandbox prod
  _DEPLOY_TARGETS: dev test prod
  _DEPLOY_TARGET: dev
  _DEPLOY_TARGET_FROM:
  _DEPLOY_PIPELINE:
  _DEPLOY_RUNNING_PROJECT_ID: c4hnrd-tools
  _REGION: northamerica-northeast1

logsBucket: 'gs://github-actions-cloudbuild/history'

timeout: 3600s
