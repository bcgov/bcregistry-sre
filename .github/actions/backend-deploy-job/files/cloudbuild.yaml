steps:
# Step 0: Prepare and setup job and cloud deploy manifest files
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "Step 0: Prepare and setup job and cloud deploy manifest files"

    PROJECT_ID=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID")
    echo "$PROJECT_ID" > /workspace/project_id.txt
    PROJECT_NAME="${PROJECT_ID%%-*}"

    generate_job_manifest() {
      local env_name=$1
      export APP_ENV=${env_name}

      if [[ -z "$(op inject -f -i ./devops/vaults.gcp.env -o ./devops/vaults.${env_name})" ]]; then
         echo "Error: failed to generate secrets via 1password vault." >&2
         exit 1
      fi

      export VPC_CONNECTOR=$(awk -F '=' '/^VPC_CONNECTOR/ {print $2}' "./devops/vaults.${env_name}")
      export VAL=$(awk '{f1=f2=$0; sub(/=.*/,"",f1); sub(/[^=]+=/,"",f2); printf "- name: %s\n  value: %s\n",f1,f2}' "./devops/vaults.${env_name}" | sed 's/"/"/g')

      if [ -n "$VPC_CONNECTOR" ]; then
        yq e '.spec.template.metadata.annotations["run.googleapis.com/vpc-access-egress"] = "private-ranges-only" |
              .spec.template.metadata.annotations["run.googleapis.com/vpc-access-connector"] = env(VPC_CONNECTOR)' \
              ./devops/gcp/k8s/job.template.yaml > "./devops/gcp/k8s/temp-job.${env_name}.yaml"
        yq e '.spec.template.spec.template.spec.containers[0].env += env(VAL)' "./devops/gcp/k8s/temp-job.${env_name}.yaml" > "./devops/gcp/k8s/job.${env_name}.yaml"
      else
        yq e '.spec.template.spec.template.spec.containers[0].env += env(VAL)' ./devops/gcp/k8s/job.template.yaml > "./devops/gcp/k8s/job.${env_name}.yaml"
      fi
    }

    remove_unused_deployment() {
      targets_full=(${_DEPLOY_FULL_DEPLOYMENT_ENVS})
      envs_diff=($(echo ${targets_full[@]} ${targets[@]} | tr ' ' '\n' | sort | uniq -u))
      for env_name in "${envs_diff[@]}"; do
        export TARGET=${PROJECT_NAME}-${env_name}
        yq -i 'del(.serialPipeline.stages[] | select(.targetId == env(TARGET)))' "./devops/gcp/clouddeploy.yaml"
      done
    }

    targets=(${_DEPLOYMENT_ENVS})
    if [[ -z "${_DEPLOYMENT_ENV_FROM}" || "${_DEPLOYMENT_ENV}" == "${targets[0]}" ]]; then
      yq e -i '.metadata.name = env(_DEPLOYMENT_PIPELINE)' "./devops/gcp/clouddeploy.yaml"
      for env_name in "${targets[@]}"; do
        generate_job_manifest "$env_name"
      done
      remove_unused_deployment
    fi

    gcloud deploy apply --file=./devops/gcp/clouddeploy.yaml  \
      --region="${_REGION}" \
      --project="${_BUILD_PROJECT}"

# Step 1: Build and deploy the job
- name: 'gcr.io/cloud-builders/gcloud'
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "Step 1: Build and deploy the job"

    PROJECT_ID=$(cat /workspace/project_id.txt)
    PROJECT_NAME="${PROJECT_ID%%-*}"
    TARGET="${PROJECT_NAME}-${_DEPLOYMENT_ENV}"
    TARGET_FROM="${PROJECT_NAME}-${_DEPLOYMENT_ENV_FROM}"
    IMAGE_PATH="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/cloud-run-repo/${_APP_NAME}"

    tag_exists() {
      local tag="$1"
      gcloud artifacts docker tags list "${IMAGE_PATH}" --filter="tag:${tag}" --format="value(tag)" 2> /dev/null | grep -q .
    }

    tag_image() {
      local source_tag="$1"
      local target_tag="$2"
      echo "Tagging: ${source_tag} -> ${target_tag}"
      gcloud artifacts docker tags add "${IMAGE_PATH}:${source_tag}" "${IMAGE_PATH}:${target_tag}"
    }

    build_and_push_image() {
      local target_tag="$1"
      if ! tag_exists "${_SHORT_SHA}"; then
        docker build -t "${IMAGE_PATH}:${_SHORT_SHA}" --cache-from "${IMAGE_PATH}:latest" .
        docker push "${IMAGE_PATH}:${_SHORT_SHA}"
        tag_image "${_SHORT_SHA}" "latest"
      else
        echo "Image ${IMAGE_PATH}:${_SHORT_SHA} already exists. Skipping build." >&2
      fi
      tag_image "${_SHORT_SHA}" "${target_tag}"
    }

    case ${_DEPLOYMENT_ENV} in
      "dev"|"test"|"sandbox"|"prod")
        if [ "${_DEPLOYMENT_ENV}" = "prod" ] && tag_exists "prod"; then
          tag_image "prod" "prod-$(date +%F)"
        fi
        if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ]; then
          build_and_push_image "${_DEPLOYMENT_ENV}"
        else
          tag_image "${_DEPLOYMENT_ENV_FROM}" "${_DEPLOYMENT_ENV}"
        fi
        ;;
      *)
        echo "Error: Invalid environment '${_DEPLOYMENT_ENV}'. Allowed values are test, sandbox, dev, or prod." >&2
        exit 1
        ;;
    esac

    cd ./devops/gcp
    RELEASE_NAME="v-${_APP_NAME}-${_SHORT_SHA}-$(date '+%Y%m%d%H%M')"

    if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ]; then
      gcloud deploy releases create "${RELEASE_NAME}" \
        --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
        --region="${_REGION}" \
        --to-target="${TARGET}" \
        --images="image-placeholder=${IMAGE_PATH}:${_SHORT_SHA}"
    else
      RELEASE_NAME=$(gcloud deploy targets describe "${TARGET_FROM}" \
            --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
            --region="${_REGION}" \
            --format="value('Latest release')")
      gcloud deploy releases promote --release="${RELEASE_NAME}" \
        --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
        --region="${_REGION}" \
        --to-target="${TARGET}"
    fi

    RELEASE_NAME="${RELEASE_NAME##*/}"
    echo "Release name: $PROJECT_ID $RELEASE_NAME"

    MAX_RETRIES=10
    RETRY_INTERVAL=30
    RETRY_COUNT=0

    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
      if gcloud run jobs describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" --region="${_REGION}" --project="$PROJECT_ID" --format="value(metadata.name)" 2> /dev/null ; then
        DEPLOY_RELEASE_NAME=$(gcloud run jobs describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" --region="${_REGION}" --project="$PROJECT_ID" --format="value(metadata.labels.release-id)" 2> /dev/null)
        echo "Deploy Release name: $DEPLOY_RELEASE_NAME"
        if [ "${DEPLOY_RELEASE_NAME}" = "${RELEASE_NAME}" ]; then
          echo "Release ${RELEASE_NAME} completed successfully."
          break
        fi
      fi
      echo "Release ${RELEASE_NAME} is still in progress."
      RETRY_COUNT=$((RETRY_COUNT + 1))
      sleep $RETRY_INTERVAL
    done

# Step 2: handle multiple jobs and scheduler(s)
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "Step 2: handle multiple jobs and scheduler(s)"

    PROJECT_ID=$(< /workspace/project_id.txt)

    validate_cron_expression() {
      local cron_expression="$1"
      local regex='^(((([0-9]+,)+[0-9]+|([0-9]+(/[0-9]+|-|#)[0-9]+)|[0-9]+L?|\*(/[0-9]+)?|L(-[0-9]+)?|\?|[A-Z]{3}(-[A-Z]{3})?) ?){5,7})|(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every ([0-9]+(ns|us|Âµs|ms|s|m|h))+)$'
      [[ "$cron_expression" =~ $regex ]]
    }

    create_schedulers() {
      local cronfile_name="$1"
      local job_name="$2"
      local job_project="$3"

      if [[ -d ./schedules && (-f ./schedules/${cronfile_name}.cron || -f ./schedules/${cronfile_name}.${_DEPLOYMENT_ENV}.cron) ]]; then
        CRON_FILE="./schedules/${cronfile_name}.${_DEPLOYMENT_ENV}.cron"
        [[ ! -f "$CRON_FILE" ]] && CRON_FILE="./schedules/${cronfile_name}.cron"

        for scheduler in $(gcloud scheduler jobs list --project="${job_project}" --location "${_REGION}" --format="value(name)" | grep "${job_name}-scheduler"); do
          gcloud scheduler jobs delete "$scheduler" --quiet --project="${job_project}" --location "${_REGION}" || echo "Failed to delete $scheduler"
        done

        mapfile -t cron_lines < "$CRON_FILE"
        local schedule_id=0
        for line in "${cron_lines[@]}"; do
          if validate_cron_expression "$line"; then
            echo "Valid cron expression: $line"
            gcloud scheduler jobs create http ${job_name}-scheduler-trigger-$((++schedule_id)) \
              --project="${job_project}" \
              --location "${_REGION}" \
              --time-zone="PST" \
              --schedule="${line}" \
              --uri="https://${_REGION}-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${job_project}/jobs/${job_name}:run" \
              --http-method POST \
              --oauth-service-account-email sa-job@${job_project}.iam.gserviceaccount.com
          fi
        done
      fi
    }

    if [[ -n "$(ls run_*.sh 2> /dev/null)" ]]; then
      gcloud run jobs describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" --format=yaml --project="${PROJECT_ID}" --region="${_REGION}" > ./devops/gcp/k8s/job.${_DEPLOYMENT_ENV}.yaml
      yq -i 'del(.status, .metadata.generation, .metadata.creationTimestamp, .metadata.namespace, .metadata.resourceVersion, .metadata.selfLink, .metadata.uid)' ./devops/gcp/k8s/job.${_DEPLOYMENT_ENV}.yaml

      for file in run_*sh; do
        JOB_SCRIPT_NAME="${file##*/}"
        echo "Job ${JOB_SCRIPT_NAME}"

        export JOB_NAME=$(echo ${_APP_NAME}-${_DEPLOYMENT_ENV}-${JOB_SCRIPT_NAME} | cut -d'.' -f 1 | tr "_" "-")
        export COMMAND="./${JOB_SCRIPT_NAME}"

        yq e '.metadata.name = env(JOB_NAME) | .spec.template.spec.template.spec.containers[0].command = env(COMMAND)' \
          ./devops/gcp/k8s/job.${_DEPLOYMENT_ENV}.yaml > ./devops/gcp/k8s/${JOB_NAME}.yaml

        if ! gcloud run jobs describe "${JOB_NAME}" --project="${PROJECT_ID}" --region="${_REGION}" &>/dev/null; then
          echo "Creating your job..."
          IMAGE="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/cloud-run-repo/${_APP_NAME}:${_DEPLOYMENT_ENV}"
          gcloud run jobs create "${JOB_NAME}" --project="${PROJECT_ID}" --region="${_REGION}" --image="${IMAGE}"
        fi

        gcloud run jobs replace ./devops/gcp/k8s/${JOB_NAME}.yaml --project="${PROJECT_ID}" --region="${_REGION}"
        create_schedulers "$(echo ${JOB_SCRIPT_NAME} | cut -d'.' -f 1 | tr "_" "-")" "${JOB_NAME}" "${PROJECT_ID}"
      done
    fi

    if [[ -n "$(ls run.sh 2> /dev/null)" ]]; then
      create_schedulers "run" "${_APP_NAME}-${_DEPLOYMENT_ENV}" "${PROJECT_ID}"
    fi

# Secret management
availableSecrets:
  secretManager:
  - versionName: projects/331250273634/secrets/OP_CONNECT_HOST/versions/latest
    env: 'OP_CONNECT_HOST'
  - versionName: projects/331250273634/secrets/OP_CONNECT_TOKEN/versions/latest
    env: 'OP_CONNECT_TOKEN'

# Build options and substitutions
options:
  automapSubstitutions: true
  substitutionOption: 'ALLOW_LOOSE'
substitutions:
  _APP_NAME: ${_APP_NAME}
  _SHORT_SHA: ${_SHORT_SHA}
  _DEPLOY_FULL_DEPLOYMENT_ENVS: "dev test sandbox prod"
  _DEPLOYMENT_ENVS: "dev test prod"
  _DEPLOYMENT_ENV: "dev"
  _DEPLOYMENT_ENV_FROM: "dev"
  _DEPLOYMENT_PIPELINE: ${_DEPLOYMENT_PIPELINE}
  _BUILD_PROJECT: "c4hnrd-tools"
  _REGION: "northamerica-northeast1"

logsBucket: 'gs://github-actions-cloudbuild/history'

timeout: 3600s
