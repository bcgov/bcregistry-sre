steps:

# Step 0: Redeploy the service with the updated environment variables.
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    # Redeploy service if flag is set
    if [[ "${_REDEPLOY:-false}" == "true" ]]; then
        echo "üîÑ Step 0: Redeploying service with updated environment variables..."

        # Fetch project ID from 1Password
        PROJECT_ID=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID") || {
            echo "‚ùå Error: Failed to retrieve project ID." >&2
            exit 1
        }

        # Set environment variable
        export APP_ENV="${_DEPLOYMENT_ENV}"

        # Generate secrets file
        if ! op inject -f -i ./devops/vaults.gcp.env -o ./devops/vaults."${_DEPLOYMENT_ENV}"; then
            echo "‚ùå Error: Failed to generate secrets via 1Password vault." >&2
            exit 1
        fi

        # Convert .env file to comma-separated key-value pairs
        VAL=$(awk -F= '{
            key=$1;
            value=substr($0, index($0, "=") + 1);
            gsub(/"/, "", value);
            printf "%s=%s,", key, value
        }' "./devops/vaults.${_DEPLOYMENT_ENV}" | sed 's/,$//')

        if [[ -z "$VAL" ]]; then
            echo "‚ö†Ô∏è Warning: Environment variables are empty. Skipping deployment." >&2
            exit 1
        fi

        # Update environment variables on Cloud Run
        echo "üöÄ Updating environment variables for ${_APP_NAME}-${_DEPLOYMENT_ENV} in project ${PROJECT_ID}."
        gcloud run services update "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
            --region="${_REGION}" \
            --project="${PROJECT_ID}" \
            --update-env-vars="${VAL}"

        gcloud run services update-traffic "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
          --region="${_REGION}" \
          --project="${PROJECT_ID}" \
          --to-latest

        echo "üèÅ ${_DEPLOYMENT_ENV} redeployment finalized successfully."

        exit 0
    fi

# Step 1: Prepare and setup service and cloud deploy manifest files
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    if [[ "${_REDEPLOY:-false}" != "true" ]]; then
      echo "üîÑ Step 1: Preparing and setting up service and Cloud Deploy manifest files..."

      # Fetch project ID and set up project variables
      PROJECT_ID=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID") || {
          echo "‚ùå Error: Failed to retrieve project ID." >&2
          exit 1
      }
      echo "$PROJECT_ID" > /workspace/project_id.txt
      PROJECT_NAME="${PROJECT_ID%%-*}"

      # Generate service manifest for each environment
      generate_service_manifest() {
          local env_name=$1
          export APP_ENV="${env_name}"

          echo "üõ†Ô∏è Generating service manifest for environment: ${env_name}..."

          # Generate secrets from 1Password
          if ! op inject -f -i ./devops/vaults.gcp.env -o "./devops/vaults.${env_name}"; then
              echo "‚ùå Error: Failed to generate secrets for ${env_name}." >&2
              exit 1
          fi

          # Extract VPC connector and environment variables
          export VPC_CONNECTOR=$(awk -F= '/^VPC_CONNECTOR/ {print $2}' "./devops/vaults.${env_name}")
          export VAL=$(awk '{f1=f2=$0; sub(/=.*/,"",f1); sub(/[^=]+=/,"",f2); printf "- name: %s\n  value: %s\n",f1,f2}' "./devops/vaults.${env_name}")

          # Generate manifest with or without VPC connector
          local template_file="./devops/gcp/k8s/service.template.yaml"
          local temp_file="./devops/gcp/k8s/temp-service.${env_name}.yaml"
          local output_file="./devops/gcp/k8s/service.${env_name}.yaml"

          cp "$template_file" "$temp_file"

          if [[ -n "$VPC_CONNECTOR" ]]; then
              echo "üåê Adding VPC connector configuration..."
              yq e '.spec.template.metadata.annotations += {"run.googleapis.com/vpc-access-egress": "private-ranges-only", "run.googleapis.com/vpc-access-connector": env(VPC_CONNECTOR)}' -i "$temp_file"
          fi

          yq e '.spec.template.spec.containers[0].env += env(VAL)' -i "$temp_file"
          mv "$temp_file" "$output_file"
      }

      # Remove unused targets from Cloud Deploy manifest
      remove_unused_deployments() {
          local -a targets_full=(${_DEPLOY_FULL_DEPLOYMENT_ENVS})
          local -a targets_current=(${_DEPLOYMENT_ENVS})

          # Calculate environments to remove
          local -a to_remove
          mapfile -t to_remove < <(comm -23 <(printf "%s\n" "${targets_full[@]}" | sort) <(printf "%s\n" "${targets_current[@]}" | sort))

          for env_name in "${to_remove[@]}"; do
              export TARGET="${PROJECT_NAME}-${env_name}"
              echo "üßπ Removing unused deployment target: ${TARGET}"
              yq e 'del(.serialPipeline.stages[] | select(.targetId == env(TARGET)))' -i "./devops/gcp/clouddeploy.yaml"
          done
      }

      # Update Cloud Deploy manifest and generate manifests if needed
      targets=(${_DEPLOYMENT_ENVS})
      if [[ -z "${_DEPLOYMENT_ENV_FROM:-}" || "${_DEPLOYMENT_ENV}" == "${targets[0]}" ]]; then
          echo "üõ†Ô∏è Updating Cloud Deploy manifest for pipeline: ${_DEPLOYMENT_PIPELINE}"
          yq e '.metadata.name = env(_DEPLOYMENT_PIPELINE)' -i "./devops/gcp/clouddeploy.yaml"

          for env_name in "${targets[@]}"; do
              generate_service_manifest "$env_name"
          done

          remove_unused_deployments
      fi

      # Apply Cloud Deploy configuration
      echo "üöÄ Applying Cloud Deploy configuration..."
      gcloud deploy apply --file=./devops/gcp/clouddeploy.yaml \
          --region="${_REGION}" \
          --project="${_BUILD_PROJECT}"
    fi

# Step 2: Build and deploy the application
- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    if [[ "${_REDEPLOY:-false}" != "true" ]]; then
      echo "üöÄ Step 2: Build and deploy the application"

      # üõ†Ô∏è Set up environment variables
      PROJECT_ID=$(< /workspace/project_id.txt)
      PROJECT_NAME="${PROJECT_ID%%-*}"
      TAG_SHA="${_SHORT_SHA}"
      TARGET="${PROJECT_NAME}-${_DEPLOYMENT_ENV}"
      TARGET_FROM="${PROJECT_NAME}-${_DEPLOYMENT_ENV_FROM:-}"
      IMAGE_PATH="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/cloud-run-repo/${_APP_NAME}"
      IMAGE_PACKAGE_PATH="projects/${_BUILD_PROJECT}/locations/${_REGION}/repositories/cloud-run-repo/packages/${_APP_NAME}"

      # üß© Function to check if a Docker tag exists
      tag_exists() {
        local tag="$1"
        gcloud artifacts docker tags list "${IMAGE_PATH}" \
          --filter="tag=${IMAGE_PACKAGE_PATH}/tags/${tag}" \
          --format="value(tag)" 2>/dev/null
      }

      # üß© Function to get SHA tag associated with an environment tag
      tag_sha() {
        local tag="$1"

        # Get the version corresponding to the given tag
        local version
        version=$(gcloud artifacts docker tags list "${IMAGE_PATH}" \
          --filter="tag=${IMAGE_PACKAGE_PATH}/tags/${tag}" \
          --format="value(version)" 2>/dev/null)

        # Get sha tag associated with the version, excluding environment tags and latest tag
        gcloud artifacts docker tags list "${IMAGE_PATH}" \
          --filter="version=${IMAGE_PACKAGE_PATH}/versions/${version} AND -tag:(latest ${_DEPLOY_FULL_DEPLOYMENT_ENVS})" \
          --format="value(tag)" 2>/dev/null
      }

      # üîñ Function to tag a Docker image
      tag_image() {
        local source_tag="$1" target_tag="$2"
        echo "üè∑Ô∏è Tagging image: ${source_tag} ‚Üí ${target_tag}"
        gcloud artifacts docker tags add "${IMAGE_PATH}:${source_tag}" "${IMAGE_PATH}:${target_tag}"
      }

      # üõ†Ô∏è Function to build and push Docker image
      build_and_push_image() {
        local target_tag="$1"
        local short_sha="$2"
        if ! tag_exists "${short_sha}"; then
          echo "üî® Building and pushing Docker image: ${short_sha}"
          docker build -t "${IMAGE_PATH}:${short_sha}" --cache-from "${IMAGE_PATH}:latest" .
          docker push "${IMAGE_PATH}:${short_sha}"
          tag_image "${short_sha}" "latest"
        else
          echo "‚úÖ Image ${IMAGE_PATH}:${short_sha} already exists. Skipping build."
        fi
        tag_image "${short_sha}" "${target_tag}"
      }

      # üîç Handle image building and tagging based on environment
      case ${_DEPLOYMENT_ENV} in
        dev|test|uat|sandbox|prod)
          [[ "${_DEPLOYMENT_ENV}" == "prod" && $(tag_exists "prod") ]] && tag_image "prod" "prod-$(date +%F)"

          if [[ -z "${_DEPLOYMENT_ENV_FROM}" || "${_DEPLOYMENT_ENV_FROM}" == "${_DEPLOYMENT_ENV}" ]]; then
            build_and_push_image "${_DEPLOYMENT_ENV}" "${_SHORT_SHA}"
          else
            tag_image "${_DEPLOYMENT_ENV_FROM}" "${_DEPLOYMENT_ENV}"
          fi

          # Get the SHA tag associated with the environment tag
          TAG_SHA=$(tag_sha "${_DEPLOYMENT_ENV}")
          ;;
        *)
          echo "‚ùå Invalid environment: '${_DEPLOYMENT_ENV}'. Allowed: dev, test, uat, sandbox, prod." >&2
          exit 1
          ;;
      esac

      echo "üîç Image sha tag: ${TAG_SHA}"

      # üåê Navigate to deployment directory
      cd ./devops/gcp

      # üîÑ Get the current active revision
      PREVIOUS_REVISION=$(gcloud run revisions list \
        --service="${_APP_NAME}-${_DEPLOYMENT_ENV}" \
        --filter="status.conditions.type=Active AND -status.conditions.status=False" \
        --format="value(metadata.name)" \
        --region="${_REGION}" \
        --project="$PROJECT_ID") || PREVIOUS_REVISION=""

      echo "üîé Previous active revision: ${PREVIOUS_REVISION}"

      # üì¶ Prepare new release
      RELEASE_NAME="v-${TAG_SHA}-$(date '+%Y%m%d%H%M')"

      # üöÄ Create or promote release
      if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ] || [[ "${_DEPLOYMENT_ENV}" =~ ^(uat|sandbox)$ ]]; then
        echo "üöÄ Create a new release."

        IMAGE_TAG="${TAG_SHA}"
        [[ "${_DEPLOYMENT_ENV}" =~ ^(uat|sandbox)$ ]] && IMAGE_TAG="${_DEPLOYMENT_ENV}"

        gcloud deploy releases create "${RELEASE_NAME}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --to-target="${TARGET}" \
          --images="image-placeholder=${IMAGE_PATH}:${IMAGE_TAG}"
      else
        RELEASE_NAME=$(gcloud deploy targets describe "${TARGET_FROM}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --format="value('Latest release')")

        echo "üöÄ Promote existing release ${RELEASE_NAME}."

        gcloud deploy releases promote --release="${RELEASE_NAME}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --to-target="${TARGET}"
      fi

      # Install required packages
      apt-get update
      apt-get install jq -y

      # ‚è≥ Wait for the release to be deployed
      MAX_RETRIES=10 RETRY_INTERVAL=30
      # This is done to ensure the release name is consistent across projects
      RELEASE_NAME=$(echo "$RELEASE_NAME" | awk -F'/' '{print $NF}')
      echo "‚è±Ô∏è Waiting for release: ${RELEASE_NAME}"

      for (( i=1; i<=MAX_RETRIES; i++ )); do
        RELEASE_STATUS=$(gcloud run revisions list \
          --service="${_APP_NAME}-${_DEPLOYMENT_ENV}" \
          --region="${_REGION}" \
          --project="$PROJECT_ID" \
          --filter="metadata.labels.release-id:${RELEASE_NAME}" \
          --format="json" | jq -r '
            if length == 0 then
              "NotFound"
            else
              (.[0].status.conditions // [])
              | map(select(.type == "Ready")
              | if length > 0 then
                  .[0].status
                else
                  "Pending"
                end
            end
          ')
        case "$RELEASE_STATUS" in
          "True")   echo "‚úÖ Ready"; break ;;
          "False")  echo "‚ùå Failed"; exit 1 ;;
          "Pending") echo "üîÑ Still deploying..."; sleep "$RETRY_INTERVAL" ;;
          "NotFound") echo "üîç Revision not created yet"; sleep "$RETRY_INTERVAL" ;;
          *) echo "‚ö†Ô∏è Unexpected: $RELEASE_STATUS"; sleep "$RETRY_INTERVAL" ;;
        esac
      done

      [[ $i -eq $((MAX_RETRIES + 1)) ]] && { echo "‚ö†Ô∏è Timeout waiting for release ${RELEASE_NAME}."; exit 1; }

      # üîç Get the new deployed revision
      DEPLOYED_REVISION=$(gcloud run revisions list \
        --service="${_APP_NAME}-${_DEPLOYMENT_ENV}" \
        --filter="status.conditions.type=Active AND -status.conditions.status=False" \
        --format="value(metadata.name)" \
        --region="${_REGION}" \
        --project="$PROJECT_ID")

      echo "$DEPLOYED_REVISION" > /workspace/deployed_revision.txt
      echo "üöÄ Deployed revision: ${DEPLOYED_REVISION}"

      # üîô Rollback traffic to the previous revision if available
      if [[ -n "$PREVIOUS_REVISION" ]]; then
        echo "üîÑ Reverting traffic to the previous revision: ${PREVIOUS_REVISION}"
        gcloud run services update-traffic "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
          --region="${_REGION}" \
          --project="$PROJECT_ID" \
          --to-revisions="$PREVIOUS_REVISION=100"
      fi
    fi


# Step 3: Trigger database migration job (if applicable)
- name: 'gcr.io/cloud-builders/gcloud'
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    if [[ "${_REDEPLOY:-false}" != "true" ]]; then
      echo "üöÄ Step 3: Trigger database migration and update traffic"

      # üõ†Ô∏è Set environment variables
      PROJECT_ID=$(< /workspace/project_id.txt)
      JOB_NAME="${_APP_NAME}-db-migration-${_DEPLOYMENT_ENV}"
      DEPLOYED_REVISION=$(< /workspace/deployed_revision.txt)

      echo "üì¶ Deploy Project ID: $PROJECT_ID"
      echo "üîç Job Name: $JOB_NAME"
      echo "üÜï Deployed Revision: $DEPLOYED_REVISION"

      # üîÑ Function to trigger database migration job
      trigger_migration() {
        if gcloud run jobs describe "$JOB_NAME" --project="$PROJECT_ID" --region="${_REGION}" --format="value(metadata.name)" &>/dev/null; then
          echo "üöß Running database migration job: $JOB_NAME"
          JOB_OUTPUT=$(gcloud run jobs execute "$JOB_NAME" \
            --region="${_REGION}" \
            --project="$PROJECT_ID" \
            --wait \
            --format="value(status.conditions.type,status.conditions.message)")

          if grep -q "Completed" <<<"$JOB_OUTPUT"; then
            echo "‚úÖ Migration job completed successfully."
          else
            echo "‚ùå Migration job failed: $JOB_OUTPUT" >&2
            exit 1
          fi
        else
          echo "‚ö†Ô∏è Migration job $JOB_NAME does not exist. Skipping."
        fi
      }

      # üöÄ Run migration job if the migrations directory exists
      if [[ -d "migrations" ]]; then
        trigger_migration
      else
        echo "üìÇ Migrations directory not found. Skipping migration."
      fi

      # üåê Update traffic to 100% for the new revision
      echo "üîÑ Updating traffic to 100% for revision: $DEPLOYED_REVISION"
      gcloud run services update-traffic "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
        --region="${_REGION}" \
        --project="${PROJECT_ID}" \
        --to-revisions="$DEPLOYED_REVISION=100"

      echo "üèÅ ${_DEPLOYMENT_ENV} deployment finalized successfully."
    fi

# Secret management
availableSecrets:
  secretManager:
  - versionName: projects/331250273634/secrets/OP_CONNECT_HOST/versions/latest
    env: 'OP_CONNECT_HOST'
  - versionName: projects/331250273634/secrets/OP_CONNECT_TOKEN/versions/latest
    env: 'OP_CONNECT_TOKEN'

# Build options and substitutions
options:
  automapSubstitutions: true
  substitutionOption: 'ALLOW_LOOSE'
substitutions:
  _APP_NAME: ${_APP_NAME}
  _SHORT_SHA: ${_SHORT_SHA}
  _DEPLOY_FULL_DEPLOYMENT_ENVS: "dev test uat sandbox prod"
  _DEPLOYMENT_ENVS: "dev test prod"
  _DEPLOYMENT_ENV: "dev"
  _DEPLOYMENT_ENV_FROM: "dev"
  _DEPLOYMENT_PIPELINE: ${_DEPLOYMENT_PIPELINE}
  _BUILD_PROJECT: "c4hnrd-tools"
  _REDEPLOY: "false"
  _REGION: "northamerica-northeast1"

# Logs storage
logsBucket: 'gs://github-actions-cloudbuild/history'

# Build timeout
timeout: 3600s
