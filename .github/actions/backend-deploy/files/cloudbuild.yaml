steps:

# Step 0: Redeploy the service with the updated environment variables.
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/sre-cd-runner:${_CD_RUNNER_VERSION}'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    # Load functions from container
    # this file located in images/gcp-sre
    source /app/functions.sh

    # Fetch project ID from 1Password
    project_id=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID") || {
        echo "‚ùå Error: Failed to retrieve project ID." >&2
        exit 1
    }
    project_name="${project_id%%-*}"

    # Redeploy service if flag is set and value is true
    if [[ "${_REDEPLOY:-false}" == "true" ]]; then
        echo "üîÑ Redeploying service with updated environment variables..."

        # Generate secrets based on vault mapping file
        # This file should contain the mapping of secrets to environment variables
        generate_secrets_file "${_DEPLOYMENT_ENV}" "./devops/vaults.gcp.env"

        # Get existing environment variables from the service
        gcloud run services describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
            --region="${_REGION}" \
            --project="${project_id}" \
            --format=yaml | \
            yq '.spec.template.spec.containers[0].env[]' | \
            awk '/^name:/ { key = $2 } /^value:/ { print key "=" $2; key = "" }' > ./devops/vaults.${_DEPLOYMENT_ENV}.old

        # Merge the old and new environment variables
        merge_vaults "./devops/vaults.${_DEPLOYMENT_ENV}.old" "./devops/vaults.${_DEPLOYMENT_ENV}" "./devops/vaults.${_DEPLOYMENT_ENV}.new"

        # Update environment variables on Cloud Run
        echo "üöÄ Updating environment variables for ${_APP_NAME}-${_DEPLOYMENT_ENV} in project ${project_id}."
        gcloud run services update "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
            --region="${_REGION}" \
            --project="${project_id}" \
            --env-vars-file="./devops/vaults.${_DEPLOYMENT_ENV}.new" 2>/dev/null

        gcloud run services update-traffic "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
          --region="${_REGION}" \
          --project="${project_id}" \
          --to-latest

        # Clean up temporary files
        rm ./devops/vaults.${_DEPLOYMENT_ENV}.*

        echo "üèÅ ${_DEPLOYMENT_ENV} redeployment finalized successfully."

        exit 0
    else
      echo "üîÑ Preparing and setting up service and Cloud Deploy manifest files..."

      # Update Cloud Deploy manifest and generate manifests if needed
      targets=(${_DEPLOYMENT_ENVS})
      if [[ -z "${_DEPLOYMENT_ENV_FROM:-}" || "${_DEPLOYMENT_ENV}" == "${targets[0]}" ]]; then
          echo "üõ†Ô∏è Updating Cloud Deploy manifest for pipeline: ${_DEPLOYMENT_PIPELINE}"
          yq e '.metadata.name = env(_DEPLOYMENT_PIPELINE)' -i "./devops/gcp/clouddeploy.yaml"

          for env_name in "${targets[@]}"; do
              generate_manifest "service" "${env_name}"
          done

          remove_unused_deployments "${_DEPLOY_FULL_DEPLOYMENT_ENVS}" "${_DEPLOYMENT_ENVS}" "${project_name}"
      fi

      # Apply Cloud Deploy configuration
      echo "üöÄ Applying Cloud Deploy configuration..."
      gcloud deploy apply --file=./devops/gcp/clouddeploy.yaml \
          --region="${_REGION}" \
          --project="${_BUILD_PROJECT}"

      echo "üîÑ Build and deploy the application"

      # Set up variables
      tag_sha="${_SHORT_SHA}"
      target="${project_name}-${_DEPLOYMENT_ENV}"
      image_path="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/cloud-run-repo/${_APP_NAME}"
      image_package_path="projects/${_BUILD_PROJECT}/locations/${_REGION}/repositories/cloud-run-repo/packages/${_APP_NAME}"

      # Handle image building and tagging based on environment
      case "${_DEPLOYMENT_ENV}" in
        dev|test|uat|sandbox|prod)
          # Indicate the previous production image
          [[ "${_DEPLOYMENT_ENV}" == "prod" && $(tag_exists "prod" "${image_path}" "${image_package_path}") ]] && tag_image "prod" "prod-$(date +%F)" "${image_path}"

          if [[ -z "${_DEPLOYMENT_ENV_FROM}" || "${_DEPLOYMENT_ENV_FROM}" == "${_DEPLOYMENT_ENV}" ]]; then
            build_and_push_image "${image_path}" "${image_package_path}" "${tag_sha}" "${_DEPLOYMENT_ENV}"
          else
            tag_image "${_DEPLOYMENT_ENV_FROM}" "${_DEPLOYMENT_ENV}" "${image_path}"
          fi

          # Get the SHA tag associated with the environment tag
          tag_sha=$(tag_sha "${_DEPLOYMENT_ENV}" "${image_path}" "${image_package_path}" "${_DEPLOY_FULL_DEPLOYMENT_ENVS}")
          ;;
        *)
          echo "‚ùå Invalid environment: '${_DEPLOYMENT_ENV}'. Allowed: dev, test, uat, sandbox, prod." >&2
          exit 1
          ;;
      esac

      echo "üîç Image sha tag: ${tag_sha}"

      # Navigate to deployment directory
      cd ./devops/gcp

      # Get the current active revision
      previous_revision=$(gcloud run revisions list \
        --service="${_APP_NAME}-${_DEPLOYMENT_ENV}" \
        --filter="status.conditions.type=Active AND -status.conditions.status=False" \
        --format="value(metadata.name)" \
        --region="${_REGION}" \
        --project="${project_id}") || previous_revision=""

      echo "üîé Previous active revision: ${previous_revision}"

      # Prepare new release
      release_name="v-${tag_sha}-$(date '+%Y%m%d%H%M')"

      # Create or promote release
      if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ] || [[ "${_DEPLOYMENT_ENV}" =~ ^(uat|sandbox)$ ]]; then
        echo "üöÄ Create a new release."

        # UAT/Sandbox environments use the same image tag as the deployment environment
        # while other environments use the SHA tag
        image_tag="${tag_sha}"
        [[ "${_DEPLOYMENT_ENV}" =~ ^(uat|sandbox)$ ]] && image_tag="${_DEPLOYMENT_ENV}"

        gcloud deploy releases create "${release_name}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --to-target="${target}" \
          --images="image-placeholder=${image_path}:${image_tag}"
      else
        release_name=$(gcloud deploy targets describe "${project_name}-${_DEPLOYMENT_ENV_FROM}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --format="value('Latest release')")

        echo "üöÄ Promote existing release ${release_name}."

        gcloud deploy releases promote --release="${release_name}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --to-target="${target}"
      fi

      # Wait for the release to be deployed
      max_retries=10
      retry_interval=30

      # This is done to ensure the release name is consistent across projects
      release_name=$(echo "${release_name}" | awk -F'/' '{print $NF}')
      echo "‚è±Ô∏è Waiting for release: ${release_name}"

      for (( i=1; i<=max_retries; i++ )); do
          RELEASE_STATUS=$(gcloud run revisions list \
            --service="${_APP_NAME}-${_DEPLOYMENT_ENV}" \
            --region="${_REGION}" \
            --project="${project_id}" \
            --filter="metadata.labels.release-id:${release_name}" \
            --format="json" | jq -r '
              if length == 0 then
                "NotFound"
              else
                (.[0].status.conditions // []) as $conditions |
                ($conditions | map(select(.type == "Ready"))) as $readyConditions |
                if ($readyConditions | length) > 0 then
                  $readyConditions[0].status
                else
                  "Pending"
                end
              end
            ')
          case "${RELEASE_STATUS}" in
            "True")   echo "‚úÖ Ready"; break ;;
            "False")  echo "‚ùå Failed"; exit 1 ;;
            "Pending") echo "‚è±Ô∏è Still deploying..."; sleep "${retry_interval}" ;;
            "NotFound") echo "üîç Revision not created yet"; sleep "${retry_interval}" ;;
            *) echo "‚ö†Ô∏è Unexpected: ${RELEASE_STATUS}"; sleep "${retry_interval}" ;;
          esac
      done

      [[ $i -eq $((max_retries + 1)) ]] && { echo "‚ö†Ô∏è Timeout waiting for release ${release_name}."; exit 1; }

      # Get the new deployed revision
      deployed_revision=$(gcloud run revisions list \
        --service="${_APP_NAME}-${_DEPLOYMENT_ENV}" \
        --filter="status.conditions.type=Active AND -status.conditions.status=False" \
        --format="value(metadata.name)" \
        --region="${_REGION}" \
        --project="${project_id}")

      echo "üÜï Deployed Revision: ${deployed_revision}"

      # Rollback traffic to the previous revision if available
      # Have to wait for migration job if available to finish before roll out
      if [[ -n "${previous_revision}" ]]; then
        echo "üîô Reverting traffic to the previous revision: ${previous_revision}"
        gcloud run services update-traffic "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
          --region="${_REGION}" \
          --project="${project_id}" \
          --to-revisions="${previous_revision}=100"
      fi

      # Navigate to home directory
      cd /workspace

      echo "üîÑ Trigger database migration and update traffic"

      # Set environment variables
      job_name="${_APP_NAME}-db-migration-${_DEPLOYMENT_ENV}"

      echo "üîç Job Name: ${job_name}"

      # Run migration job if the migrations directory exists
      if [[ -d "migrations" ]]; then
        if gcloud run jobs describe "${job_name}" --project="${project_id}" --region="${_REGION}" --format="value(metadata.name)" &>/dev/null; then
          echo "üöß Running database migration job: ${job_name}"
          JOB_OUTPUT=$(gcloud run jobs execute "${job_name}" \
            --region="${_REGION}" \
            --project="${project_id}" \
            --wait \
            --format="value(status.conditions.type,status.conditions.message)")

          if grep -q "Completed" <<<"${JOB_OUTPUT}"; then
            echo "‚úÖ Migration job completed successfully."
          else
            echo "‚ùå Migration job failed: ${JOB_OUTPUT}" >&2
            exit 1
          fi
        else
          echo "‚ö†Ô∏è Migration job ${job_name} does not exist. Skipping."
        fi
      else
        echo "üìÇ Migrations directory not found. Skipping migration."
      fi

      # Update traffic to 100% for the new revision
      echo "üîÑ Updating traffic to 100% for revision: ${deployed_revision}"
      gcloud run services update-traffic "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
        --region="${_REGION}" \
        --project="${project_id}" \
        --to-revisions="${deployed_revision}=100"

      echo "üèÅ ${_DEPLOYMENT_ENV} deployment finalized successfully."
    fi

# Secret management
availableSecrets:
  secretManager:
  - versionName: projects/331250273634/secrets/OP_CONNECT_HOST/versions/latest
    env: 'OP_CONNECT_HOST'
  - versionName: projects/331250273634/secrets/OP_CONNECT_TOKEN/versions/latest
    env: 'OP_CONNECT_TOKEN'

# Build options and substitutions
options:
  automapSubstitutions: true
  substitutionOption: 'ALLOW_LOOSE'
substitutions:
  _CD_RUNNER_VERSION: "1.0.1"
  _APP_NAME: ${_APP_NAME}
  _SHORT_SHA: ${_SHORT_SHA}
  _DEPLOY_FULL_DEPLOYMENT_ENVS: "dev test uat sandbox prod"
  _DEPLOYMENT_ENVS: "dev test prod"
  _DEPLOYMENT_ENV: "dev"
  _DEPLOYMENT_ENV_FROM: "dev"
  _DEPLOYMENT_PIPELINE: ${_DEPLOYMENT_PIPELINE}
  _BUILD_PROJECT: "c4hnrd-tools"
  _REDEPLOY: "false"
  _REGION: "northamerica-northeast1"

# Logs storage
logsBucket: 'gs://github-actions-cloudbuild/history'

# Build timeout
timeout: 3600s
