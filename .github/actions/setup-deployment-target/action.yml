name: 'Setup deployment target'
description: 'Setup deployment target'

inputs:
  environment:
    required: true
  app_name:
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup targets
      shell: bash
      run: |
        if [ "${{inputs.environment}}" == "sandbox" ]; then
          # sandbox always from test environment
          echo DEPLOY_PIPELINE=${{ inputs.app_name }}-sandbox-pipeline >> $GITHUB_ENV
          echo DEPLOY_TARGETS="sandbox" >> $GITHUB_ENV
          echo DEPLOY_TARGET="sandbox" >> $GITHUB_ENV
          echo DEPLOY_TARGET_FROM="test" >> $GITHUB_ENV
        elif [ "${{inputs.environment}}" == "uat" ]; then
          # uat always from test environment
          echo DEPLOY_PIPELINE=${{ inputs.app_name }}-uat-pipeline >> $GITHUB_ENV
          echo DEPLOY_TARGETS="uat" >> $GITHUB_ENV
          echo DEPLOY_TARGET="uat" >> $GITHUB_ENV
          echo DEPLOY_TARGET_FROM="test" >> $GITHUB_ENV
        else
          # define pipeline name and pipeline targets
          targets="dev test prod"

          echo "branch name: ${{ github.ref_name }}"

          case ${{ github.ref_name }} in
          main)
              echo DEPLOY_PIPELINE="${{ inputs.app_name }}-pipeline" >> $GITHUB_ENV
              ;;
          feature*)
              echo DEPLOY_PIPELINE="${{ inputs.app_name }}-feature-pipeline" >> $GITHUB_ENV
              ;;
          hotfix*)
              echo DEPLOY_PIPELINE="${{ inputs.app_name }}-hotfix-pipeline" >> $GITHUB_ENV
              targets="test prod"
              ;;
          release*)
              echo DEPLOY_PIPELINE="${{ inputs.app_name }}-release-pipeline" >> $GITHUB_ENV
              targets="prod"
              ;;
          *)
              echo "The branch ${{ github.ref_name }} is not allow to do deployment!" >> $GITHUB_STEP_SUMMARY
              exit 1
              ;;
          esac
          target_array=(${targets})
          target=${{ inputs.environment }}
          target_index=-1

          if [ -z "${target}" ]; then
            # from 'push/PR' or pick a wrong target in the input, then reset the target to first item in the targets
            target=${target_array[0]}
          fi

          for index in "${!target_array[@]}"; do
            if [ "${target_array[index]}" = "$target" ]; then
              target_index=$index
              break
            fi
          done

          if [ $target_index -lt 0 ]; then
            echo "The $target is not on the deployment target list ($targets)!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo DEPLOY_TARGETS=${targets} >> $GITHUB_ENV
          echo DEPLOY_TARGET=${target} >> $GITHUB_ENV
          echo DEPLOY_TARGET_FROM= >> $GITHUB_ENV

          # find the 'from target'
          if [ $target_index -gt 0 ]; then
            echo DEPLOY_TARGET_FROM=${target_array[$((target_index - 1))]} >> $GITHUB_ENV
          fi
        fi
