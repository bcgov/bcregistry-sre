steps:

# Tag/Build/Push Image to Artifactory
- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail  # Added for better error handling

    echo "Step 0: Building and tagging the image and creating build content."

    # Common variables to reduce repetition
    IMAGE_PATH="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/firebase-repo/${_APP_NAME}"

    # Function to check if tag exists in Google Artifact Registry
    tag_exists() {
      local tag="$1"
      res=$(gcloud artifacts docker tags list "${IMAGE_PATH}" --filter="tag:${tag}" --format="value(tag)" 2> /dev/null)
      if [ -n "$res" ]; then
        return 0  # Tag exists
      else
        return 1  # Tag does not exist
      fi
    }

    # Function to tag Docker image
    tag_image() {
      local source_tag="$1"
      local target_tag="$2"

      echo "Tagging: ${source_tag} -> ${target_tag}"

      gcloud artifacts docker tags add \
        "${IMAGE_PATH}:${source_tag}" \
        "${IMAGE_PATH}:${target_tag}"
    }

    # Function to build and push Docker image
    build_and_push_image() {
      local target_tag="$1"

      # If the tag does not exist, build and push the image
      if ! tag_exists "${_SHORT_SHA}"; then
        docker build \
          -f Dockerfile-build \
          -t "${IMAGE_PATH}:${_SHORT_SHA}" \
          --build-arg NODE_VERSION=${_NODE_VERSION} \
          --cache-from ${IMAGE_PATH}:latest\
          .

        docker push "${IMAGE_PATH}:${_SHORT_SHA}"

        tag_image "${_SHORT_SHA}" "latest"
      else
        echo "Image ${IMAGE_PATH}:${_SHORT_SHA} already exists. Skipping build." >&2
      fi

      tag_image "${_SHORT_SHA}" "${target_tag}"
    }

    # Handle image building and tagging based on deployment target
    if [ "${_REDEPLOY}" == "" ] || [ "${_REDEPLOY}" == "false" ]; then
      case ${_DEPLOYMENT_ENV} in
        "dev"|"test"|"uat"|"sandbox"|"prod")
          if [ "${_DEPLOYMENT_ENV}" = "prod" ]; then
            # For production, create a dated backup tag if prod image exists
            if tag_exists "prod"; then
              tag_image "prod" "prod-$(date +%F)"
            fi
          fi

          if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ]; then
            # Build new image for fresh deployment
            build_and_push_image "${_DEPLOYMENT_ENV}"
          else
            # Tag existing image for promotion
            tag_image "${_DEPLOYMENT_ENV_FROM}" "${_DEPLOYMENT_ENV}"
          fi
          ;;
        *)
          echo "Error: Invalid environment '${_DEPLOYMENT_ENV}'. Allowed values are test, uat, sandbox, dev, or prod." >&2
          exit 1
          ;;
      esac
    else
      echo "Redeploy: '${_DEPLOYMENT_ENV}'"
    fi

    # Copy contents from the image (simplified)
    docker create --name "${_APP_NAME}" "${IMAGE_PATH}:${_DEPLOYMENT_ENV}"
    docker cp "${_APP_NAME}:/app/." /workspace/app

- name: "northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre"
  secretEnv: ["OP_CONNECT_HOST", "OP_CONNECT_TOKEN"]
  dir: "app"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail  # Added for stricter error handling

    echo "Step 1: Prepare build environment."

    # Consolidate environment variable retrieval
    APP_HOST_NAME=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/FIREBASE_HOST_NAME")
    DEPLOY_PROJECT_ID=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID")
    BUILD_FOLDER=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/BUILD_FOLDER" || echo ".")

    # Validate critical variables
    [[ -z "$APP_HOST_NAME" ]] && { echo "Error: APP_HOST_NAME is empty"; exit 1; }
    [[ -z "$DEPLOY_PROJECT_ID" ]] && { echo "Error: DEPLOY_PROJECT_ID is empty"; exit 1; }

    # Simplified firebase config update
    jq --arg site "$APP_HOST_NAME" '.hosting.site = $site' "firebase-${_DEPLOYMENT_ENV}.json" > "firebase-${_DEPLOYMENT_ENV}.tmp.json" &&
    mv "firebase-${_DEPLOYMENT_ENV}.tmp.json" "firebase-${_DEPLOYMENT_ENV}.json"

    # Write project details efficiently
    echo "$DEPLOY_PROJECT_ID" > /workspace/project_id.txt
    echo "$BUILD_FOLDER" > /workspace/build_folder.txt

    # Prepare environment with error checking
    export APP_ENV="${_DEPLOYMENT_ENV}"
    [[ -f "./devops/vaults.env" ]] || { echo "Error: vaults.env not found"; exit 1; }
    op inject -i ./devops/vaults.env -o "${BUILD_FOLDER}/.env" -f

    # Conditional secret loading with improved error handling
    load_secret() {
      local env_var="$1"
      local secret_name="$2"
      local output_file="$3"

      if grep -q "${env_var}=" "${BUILD_FOLDER}/.env"; then
        gcloud secrets versions access "${_DEPLOYMENT_ENV}" \
          --secret="${secret_name}" \
          --project="${_BUILD_PROJECT}" \
          --format="get(payload.data)" | tr "_-" "/+" | base64 -d > "${output_file}" ||
          { echo "Failed to load secret: ${secret_name}"; exit 1; }
      fi
    }

    load_secret "GOOGLE_APPLICATION_CREDENTIALS" "FIREBASE_ADMINSDK" "${BUILD_FOLDER}/project-firebase-adminsdk.json"
    load_secret "E2E_SETTINGS" "${_APP_NAME}_E2E_SETTINGS" "${BUILD_FOLDER}/e2e.json"

- name: "northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/firebase-repo/${_APP_NAME}:${_DEPLOYMENT_ENV}"
  dir: "app"
  script: |
    #!/usr/bin/env sh
    set -euo pipefail  # Added for stricter error handling

    echo "Step 2: Build application."

    BUILD_FOLDER=$(cat /workspace/build_folder.txt)
    echo "Building in folder: $BUILD_FOLDER"

    echo "Node version: $(node --version)"

    # Unified package management and build process
    if [ -f "pnpm-lock.yaml" ]; then

      # PNPM-specific build process
      # Install pnpm using the specified version or default to "latest-9" if _PNPM_VERSION is not set.
      npm install --global pnpm@${_PNPM_VERSION:-latest-9}

      PNPM_VER=$(pnpm --version)
      echo "PNPM version: ${PNPM_VER}"

      # Temporary fix for a known corepack issue:
      # Activate corepack preparation if PNPM version is 10.0.0 or newer.
      MIN_PNPM_VER="10.0.0"
      if [ "$(printf '%s\n%s' "${MIN_PNPM_VER}" "${PNPM_VER}" | sort -V | head -n1)" = "${MIN_PNPM_VER}" ]; then
        corepack prepare pnpm@10.0.0 --activate
        echo "corepack version: $(corepack --version || echo 'not installed')"
      fi

      pnpm install --frozen-lockfile --prefer-offline

      # Conditional build with improved path handling
      if [ -n "$BUILD_FOLDER" ] && [ "$BUILD_FOLDER" != "." ]; then
        echo "Executing build for specific folder: $BUILD_FOLDER"
        pnpm --filter "./$BUILD_FOLDER" build

        # More robust build artifact movement
        [ -d "${BUILD_FOLDER}/dist" ] && mv "${BUILD_FOLDER}/dist" /workspace/app/dist
      else
        pnpm build
      fi
    elif [ -f "package-lock.json" ]; then
      # NPM-specific build process
      npm ci --prefer-offline
      npm run build
    else
      echo "No lockfile found. Unable to build project."
      exit 1
    fi

    # Verbose output for debugging
    echo "Build artifacts:"
    ls -lah /workspace/app

- name: gcr.io/${_BUILD_PROJECT}/firebase
  dir: "app"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail  # Added for robust error handling

    echo "Step 3: Deploy application to firebase."

    RUNNING_PROJECT=$(cat /workspace/project_id.txt)
    CONFIG_FILE="firebase-${_DEPLOYMENT_ENV}.json"

    # Validate project and config file exist
    [[ -z "$RUNNING_PROJECT" ]] && { echo "Error: Project ID is empty"; exit 1; }
    [[ ! -f "$CONFIG_FILE" ]] && { echo "Error: Firebase config file $CONFIG_FILE not found"; exit 1; }

    # Verbose deployment with error checking
    firebase deploy \
      --project="${RUNNING_PROJECT}" \
      --config="${CONFIG_FILE}" \
      --only hosting \
      --debug  # Added debug flag for better visibility

# E2E testing
- name: "northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/firebase-repo/${_APP_NAME}:${_DEPLOYMENT_ENV}"
  dir: "app"
  script: |
    #!/usr/bin/env sh

    # pnpm run test:e2e:ui

# Secret management
availableSecrets:
  secretManager:
  - versionName: projects/331250273634/secrets/OP_CONNECT_HOST/versions/latest
    env: 'OP_CONNECT_HOST'
  - versionName: projects/331250273634/secrets/OP_CONNECT_TOKEN/versions/latest
    env: 'OP_CONNECT_TOKEN'

# Build options and substitutions
options:
  automapSubstitutions: true
  substitutionOption: "ALLOW_LOOSE"
substitutions:
  _NODE_VERSION: ${_NODE_VERSION}
  _PNPM_VERSION: ${_PNPM_VERSION}
  _APP_NAME: ${_APP_NAME}
  _BUILD_PROJECT: "c4hnrd-tools"
  _REDEPLOY: "false"
  _DEPLOYMENT_ENV: ${_DEPLOYMENT_ENV} #dev/test/uat/sandbox/prod
  _DEPLOYMENT_ENV_FROM: ${_DEPLOYMENT_ENV_FROM} #dev/test/sandbox
  _REGION: "northamerica-northeast1"

# Logs storage
logsBucket: 'gs://github-actions-cloudbuild/history'

# Build timeout
timeout: 3600s
