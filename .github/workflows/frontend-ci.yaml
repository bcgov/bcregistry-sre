name: Frontend Application CI

on:
  workflow_call:
    inputs:
      node_version:
        type: string
        default: "21"
      pnpm_version:
        type: string
        default: "9"
      app_name:
        required: true
        type: string
      working_directory:
        type: string
        default: "."
      skip_codecov: # Just here until SRE fixes codecov
        required: false
        type: boolean
        default: false  

jobs:
  detemine-package-manager:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    outputs:
      PNPM: ${{ steps.check.outputs.PNPM }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        name: Check PNPM package
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=yes" >> "$GITHUB_OUTPUT"
          else
            echo "PNPM=no" >> "$GITHUB_OUTPUT"
          fi

  linting-pnpm:
    needs: detemine-package-manager
    if: ${{ needs.detemine-package-manager.outputs.PNPM == 'yes' }}
    strategy:
      fail-fast: true
      matrix:
        node-version: ["${{ inputs.node_version }}"]
        pnpm-version: ["${{ inputs.pnpm_version }}"]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: ${{ inputs.working_directory }}/pnpm-lock.yaml
      - name: Install dependencies
        run: |
          PNPM_VER=$(pnpm --version)
          echo "PNPM version: ${PNPM_VER}"

          # Temporary fix for a known corepack issue:
          # Activate corepack preparation if PNPM version is 10.0.0 or newer.
          MIN_PNPM_VER="10.0.0"
          if [ "$(printf '%s\n%s' "${MIN_PNPM_VER}" "${PNPM_VER}" | sort -V | head -n1)" = "${MIN_PNPM_VER}" ]; then
            corepack prepare pnpm@10.0.0 --activate
            echo "corepack version: $(corepack --version || echo 'not installed')"
          fi

          pnpm install
      - name: Linting
        run: |
          pnpm run lint

  unit-testing-pnpm:
    needs: linting-pnpm
    strategy:
      fail-fast: true
      matrix:
        node-version: ["${{ inputs.node_version }}"]
        pnpm-version: ["${{ inputs.pnpm_version }}"]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: ${{ inputs.working_directory }}/pnpm-lock.yaml
      - name: Debug files
        run: |
          pwd
          ls -la
      - name: Copy .env
        run: |
          cp .env.example .env 2>/dev/null || :
          cp .env.sample .env 2>/dev/null || :
          cp env.example .env 2>/dev/null || :
          cp env.sample .env 2>/dev/null || :
      - name: Install dependencies
        run: |
          PNPM_VER=$(pnpm --version)
          echo "PNPM version: ${PNPM_VER}"

          # Temporary fix for a known corepack issue:
          # Activate corepack preparation if PNPM version is 10.0.0 or newer.
          MIN_PNPM_VER="10.0.0"
          if [ "$(printf '%s\n%s' "${MIN_PNPM_VER}" "${PNPM_VER}" | sort -V | head -n1)" = "${MIN_PNPM_VER}" ]; then
            corepack prepare pnpm@10.0.0 --activate
            echo "corepack version: $(corepack --version || echo 'not installed')"
          fi

          pnpm install
      - name: Testing
        run: |
          pnpm run test
      - uses: actions/upload-artifact@v4
        with:
          name: coveragefile
          path: ${{ inputs.working_directory }}/coverage.xml
          retention-days: 1

  code-coverage:
    needs: unit-testing-pnpm
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/download-artifact@v4
      if: ${{ inputs.skip_codecov == true }}
      with:
        name: coveragefile
    - name: Upload coverage to Codecov
      if: ${{ inputs.skip_codecov == true }}
      uses: codecov/codecov-action@v5
      with:
        file: coverage.xml
        flags: ${{ inputs.codecov_flag }}
        name: codecov-${{ inputs.app_name }}
        token: ${{ vars.CODECOV_TOKEN }}
        fail_ci_if_error: false

  verify-build:
    needs: linting-pnpm
    strategy:
      fail-fast: true
      matrix:
        node-version: ["${{ inputs.node_version }}"]
        pnpm-version: ["${{ inputs.pnpm_version }}"]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: ${{ inputs.working_directory }}/pnpm-lock.yaml
      - name: Install dependencies
        run: |
          PNPM_VER=$(pnpm --version)
          echo "PNPM version: ${PNPM_VER}"

          # Temporary fix for a known corepack issue:
          # Activate corepack preparation if PNPM version is 10.0.0 or newer.
          MIN_PNPM_VER="10.0.0"
          if [ "$(printf '%s\n%s' "${MIN_PNPM_VER}" "${PNPM_VER}" | sort -V | head -n1)" = "${MIN_PNPM_VER}" ]; then
            corepack prepare pnpm@10.0.0 --activate
            echo "corepack version: $(corepack --version || echo 'not installed')"
          fi

          pnpm install
      - name: Verify build
        run: |
          pnpm run build-check

  linting-npm:
    needs: detemine-package-manager
    if: ${{ needs.detemine-package-manager.outputs.PNPM == 'no' }}
    strategy:
      fail-fast: true
      matrix:
        node-version: ["${{ inputs.node_version }}"]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ${{ inputs.working_directory }}/package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Linting
        run: |
          npm run lint

  unit-testing-npm:
    needs: linting-npm
    strategy:
      fail-fast: true
      matrix:
        node-version: ["${{ inputs.node_version }}"]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ${{ inputs.working_directory }}/package-lock.json
      - name: Debug files
        run: |
            pwd
            ls -la
      - name: Copy .env
        run: |
          cp .env.example .env 2>/dev/null || :
          cp .env.sample .env 2>/dev/null || :
          cp env.example .env 2>/dev/null || :
          cp env.sample .env 2>/dev/null || :
      - name: Install dependencies
        run: |
          npm ci
      - name: Testing
        run: |
          npm run test
      - uses: actions/upload-artifact@v4
        with:
          name: coveragefile
          path: ${{ inputs.working_directory }}/coverage.xml
          retention-days: 1

  code-coverage-npm:
    needs: unit-testing-npm
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/download-artifact@v4
      if: ${{ inputs.skip_codecov != 'true' }}
      with:
        name: coveragefile
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: ${{ inputs.skip_codecov != 'true' }}
      with:
        file: coverage.xml
        flags: ${{ inputs.codecov_flag }}
        name: codecov-${{ inputs.app_name }}
        token: ${{ vars.CODECOV_TOKEN }}
        fail_ci_if_error: false

  verify-build-npm:
    needs: linting-npm
    strategy:
      fail-fast: true
      matrix:
        node-version: ["${{ inputs.node_version }}"]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ${{ inputs.working_directory }}/package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Verify build
        run: |
          npm run build-check
