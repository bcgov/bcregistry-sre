name: Auth CI

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      working_directory:
        type: string
        default: "."
      codecov_flag:
        type: string

jobs:
  linting:
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.11" ]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ inputs.working_directory }}/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - name: Run isort
        run: |
          poetry run isort src tests --check

      - name: Run black
        run: |
          poetry run black src tests --check

      - name: Run pylint (src)
        run: |
          poetry run pylint src

      - name: Run pylint (tests)
        continue-on-error: true
        run: |
          poetry run pylint tests

      - name: Run flake8 (src)
        run: |
          poetry run flake8 src

      - name: Run flake8 (tests)
        continue-on-error: true
        run: |
          poetry run flake8 tests

  testing:
    needs: linting

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.11" ]

    env:
      DATABASE_TEST_USERNAME: postgres
      DATABASE_TEST_PASSWORD: postgres
      DATABASE_TEST_NAME: postgres
      DATABASE_TEST_HOST: localhost
      DATABASE_HOST: localhost
      DATABASE_PASSWORD: postgres
      NATS_SERVERS: "nats://nats:4222"
      NATS_CLIENT_NAME: entity.legal_api
      NATS_CLUSTER_ID: test-cluster
      NATS_FILER_SUBJECT: entity.filing.filer
      NATS_QUEUE: entity-auth-worker
      TEST_NATS_DOCKER: True
      STAN_CLUSTER_NAME: test-cluster
      JWT_OIDC_JWKS_CACHE_TIMEOUT: 300
      GO_LIVE_DATE: 2019-08-12
      LEGAL_API_URL: https://mock_legal_api_url
      ACCOUNT_SVC_ENTITY_URL: https://mock_account_svc_entity_url
      COLIN_API: https://mock_colin_api_url
      ACCOUNT_SVC_AUTH_URL: https://mock_account_svc_auth_url
      ACCOUNT_SVC_CLIENT_ID: account_svc_client_id
      ACCOUNT_SVC_CLIENT_SECRET: account_svc_client_secret
      BUSINESS_SCHEMA_ID: test_business_schema_id
      BUSINESS_CRED_DEF_ID: test_credential_definition_id
      BUSINESS_SCHEMA_NAME: digital_business_card
      BUSINESS_SCHEMA_VERSION: "1.0.0"

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ inputs.working_directory }}/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #    add matrix specifics and run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          poetry run pytest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ inputs.working_directory }}/coverage.xml
          flags: ${{ inputs.codecov_flag }}
          name: codecov-${{ inputs.app_name }}
          fail_ci_if_error: true

  verify-build:
    needs: linting

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: build to check strictness
        id: build
        run: |
          docker build --no-cache -t ${{ inputs.app_name }} .
