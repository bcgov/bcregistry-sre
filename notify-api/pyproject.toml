[tool.poetry]
name = "notify-api"
version = "2.1.1"
description = ""
authors = ["pwei <patrick.wei@gov.bc.ca>"]
license = "Apache 2.0"
readme = "README.md"
packages = [{include = "notify_api", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
flask = "^2.2.3"
flask-sqlalchemy = "^3.0.3"
flask-babel = "^3.1.0"
Flask-Cors = "^3.0.10"
flask-migrate = "^4.0.4"
psycopg2 = "^2.9.6"
launchdarkly-server-sdk = "^8.1.3"
python-dotenv = "^1.0.0"
Flask-Pydantic = "^0.11.0"
PyPDF2 = "^3.0.1"
attrs = "^23.1.0"
flask-jwt-oidc = "^0.3.0"
datedelta = "^1.4"
dpath = "^2.1.6"
gunicorn = "^20.1.0"
jsonschema = "^4.17.3"
pycountry = "^22.3.5"
pydantic = "^1.10.8"
reportlab = "^4.0.0"
requests = "^2.31.0"
strict-rfc3339 = "^0.7"
email-validator= "1.3.1"
phonenumbers = "8.13.6"
notifications-python-client = "7.0.0"
beautifulsoup4 = "4.11.2"
sqlalchemy-continuum = "^1.3.14"
pg8000 = "^1.30.3"
structlog = "^24.1.0"
google-cloud-logging = "^3.9.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-exporter-gcp-trace = "^1.6.0"
opentelemetry-exporter-gcp-monitoring = "^1.6.0a0"
opentelemetry-propagator-gcp = "^1.6.0"
opentelemetry-instrumentation-requests = "^0.43b0"
opentelemetry-instrumentation-flask = "^0.43b0"
opentelemetry-instrumentation-logging = "^0.43b0"
opentelemetry-instrumentation-sqlalchemy = "^0.43b0"

[tool.poetry.group.test.dependencies]
freezegun = "^1.2.2"
hypothesis = "^6.75.6"
lovely-pytest-docker = "^0.3.1"
pexpect = "^4.8.0"
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
requests-mock = "^1.11.0"
faker = "^19.12.0"

[tool.poetry.group.dev.dependencies]
black = "^24.0.0"
pylint = "^3.0.3"
bandit = "^1.7.6"
flake8-pyproject = "^1.2.3"
isort = "^5.13.2"

[tool.bandit]
exclude_dirs = [".venv","tests"]
skips = ["B104"]

[tool.flake8]
ignore = ["F401","E402", "Q000", "E203"]
exclude = [
    ".venv",
    ".git",
    ".history",
    "devops",
    "*migrations*",
]
per-file-ignores = [
    "__init__.py:F401",
    "*.py:B902"
]
max-line-length = 120
docstring-min-length=10
count = true

[tool.black]
target-version =  ["py310", "py311", "py312"]
line-length = 120
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  migrations
  | devops
)/
'''

[tool.isort]
atomic = true
profile = "black"
line_length = 120
skip_gitignore = true
skip_glob = ["migrations", "devops"]

[tool.pylint.main]
fail-under = 10
max-line-length = 120
ignore = [ "migrations", "devops", "tests"]
ignore-patterns = ["^\\.#"]
ignored-modules= ["flask_sqlalchemy", "sqlalchemy", "SQLAlchemy" , "alembic", "scoped_session"]
ignored-classes= "scoped_session"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
extension-pkg-whitelist = "pydantic"
notes = ["FIXME","XXX","TODO"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = "C0209,C0301,W0511,W0613,W0703,W1514,W1203,R0801,R0902,R0903,R0911,R0401,R1705,R1718,W3101"
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
variable-naming-style = "snake_case"
docstring-min-length = -1
good-names = ["i", "j", "k", "ex", "Run", "_"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"